File structure and flow-control
main.js :: 
- main entry for Trace Viewer Server
- based on argument passed to programme, set configuration object
  e.g. node main.js [options] logfile
 options are
         - port <portnum>: use port <portnum> for the http 
         - auth <pwdfile>: perform basic authentication using users and password from <
         - nslog <logfile> <logfile2> ... : load network server log files
         - mactype < mactype >
         - prefix <type> <path>
         - hostif <ip address>
         - getlogs <script>
         - omlog <logfile> <logfile2> ...
         - pxlog <logfile> <logfile2> ...
         - recovlog <logfile> <logfile2> ...
         - https <key> <cert>
         - dbase <db-hostname> <db-username> <db-password>
         - dbaseom <db-hostname> <db-username> <db-password> <db-name>
         - dbasepx <db-hostname> <db-username> <db-password> <db-name>
         - dbasenwk <db-hostname> <db-username> <db-password> <db-

 - initiate the trace viewer server on provided port
 - initialize recobj 
 - requires traceuser.json file which contains user details (we need sample file for this)
 - start scanning the log file use method from scanfile.js
 - on browser index.html file will be loaded as home page.

scanfile.js ::
- helper function that  look for and extract relevant data
- scan file methods for object network server, recovery server, gatekeeper, om server, proxy server
- scan each line string in log file and call add record method to push message to record object (calling recobj.js file)

recobj.js
- record object manipulation functions
- addInit() => initialize record object on server starting
- addRecObj() => push new record to record object
- getRecObj() => get records from record object
- sortRecords() => sort record object


nodedb.js
- contains details of nodes(gateways) encountered in trace
- uses pgsql db to which is having details of all nodes details (name, address etc...)
- used in recobj to get devaddrs from devEUI before pushing to recobj object
- on server startup populateDevices() method called. If nodes.json is available and not null, then devices from json file are added in configNode array. which contains devEui, devaddr (primary key), nwkskey (secondary key), deveui, appskey, appkey, name etc...

filetools.js
- Files utility function
- getFileStat() 
- addFile() add file to scanningFiles array
- start scanning logFile, return relevant lineStr from log file with offset, fileposition etc...


report.js
- fillReport() when report link activated
- using scanReportData() from reportscan.js
- saveTableAsCsv() export as csv
- saveTableAsJson() export as json
- showNodeTable() displaying reports in HTML Table
- saveTableAsCsv, saveTableAsJson and showNodeTable all three function using getSortedNodeList(), which is using nodeList object exported by reportscan.js

reportscan.js
- scanReportData() exports day and time limits
- exports a nodeList object, which contains all details required to show at reports screen
- report values are exported here as a nodeList object

filters.js
- filter Utility functions
- findRange() used to provide range object based on filter parameters
- limitRange() limit the range based on numLines and filters, also direction (from top or bottom)
- applyFilters() applying filters  after range object retrieved

loramessage.js
- lora mac v3 messages
- loraMacMessageDecode() when lora messages retrieved from log file this function used to decode the message
- use loraCrypt.js for message dycryption

eventtable.js
- trace viewer ui events utility functions.
- contains function to generate HTML table based on log records and event callback for dom elements
- writeEventTable() tabledata for Events module will be rendered thorugh this function
- insertRow() display before and after log Rrecords

Code Flow Control
=================
starting the server ::  node main.js [args] logfile

Following three process execute parallelly
1) server will be started at provided port
- startTraceWebServer() will be executed
- authentication required to load ui in browser
- users are loaded from traceuser.json file. (we need sample file for this. as of now we bypass the authentication)
- home page (Help Page) loaded.
2) periodically load gateway details from OM Db.
- periodicLoadOfGatewayInfoFromOmDb() ( called every 5 minutes )
- in gwdb.js, getGwNamesFromDataBase() called and get gateway name and deveui
3) loop through all args and create a config object
- startScan() function executed
- then it will called scanFileObjNwkSrv() (based on type) from scanfile.js,
it will return lineHandle function.
- lineHandle => take lines of logfile as a input and match with different patterns for server logs.
create a object and push that to record object using addRecObj method (from ./recobj.js)
scanfile.js => helper function that look for and extract relevant data
recobj.js => record object manipulation functions
addInit initialize record object on server starting
addRecObj => push new record to record object
getRecObj => get records from record object
sortRecords => sort record object

Once Home Page loaded, it will show default link for report for last 24 hrs and last 7 days 

1) /trace (events)
   - filltrace() from main.js called.
   - find range and limit based on provided filter (if any) from filter.js
   - makeHtmlHeader() called. used to create HTML Header
   - makeFilterHeader() called. used to create Filter Header
   - create a tbldata object based on filtered output of records object
   - doRowStuff() called which is responsible to create every table row to display
   - insertRawTraceLine() called to generate tabldata for before and after log records for selected index
   - writeEventTable() from eventatable.js, loop thorugh tbldata obj and generete html tabe to display
   - inserRow() from eventable.js, in case of showing before and after logs , html table will be rendered by this method

2) /report 
   - fillreport() function from report.js called
   - find range and limit based on provided filter (if any) from filter.js
   - scanReportData() (from reportscan.js) return day  and time range
   - then it will called getNodeIdx() which will create nodeList object with report tagble details
   - saveTableAsCsv() it will export report as csv
   - saveTableAsJson() it will export report as json
   - showNodeTable() it will display reports details as table columns





   Queries
   =======
   CurrentFlow for filescanning

   --> logs file provided at command line. local or remote file
   --> a scanning function called for every 5 seconds to scan the file
   --> log records parsed and appended in recObj buffer array
   --> now if any more data appended in logfiles (which are mentioned as commandline argumnents earlier), it will scan that new appended logs and add those log record in recObj buffer array
   --> now if server restart, crash or reset, all obj will be remove form in memory storage
   --> now as we are saving these records in mongodb instead of in memory storage, we have to avoid document duplicacy. What should be unique field ? How should we do that ?