Node JS CLI

1)  node --zero-fill-buffers index.JS
    Instead of random memory garbage, it will create zero filled buffer.so this will used when it is necessary that newly created Buffer can not contain any sensitive data, as it has significant impact on performance.

2)  node -v OR node --version 
    show version of node

3)  (node -e OR node --eval) 'console.log(2+3)';
    --> 5
    evaluate the expression

4)  (node -p OR node --print) '2+3';
    --> 5
    it will evaluate the expression, and then print the output

5)  (node -c OR node --check) index.JS
    It  will check syntax of the provided file, without executing it.

6)  node --inspect
    when you want to debug your node code in browser, use this option. it will give youa a url containing chrome debugging protocol.

7)  node --prof index.JS
    it will give you v8 profiler output. above command will create a isolate file in current working directory.then you have to run node js process with --prof-process option.
    node --prof-process isloate-0-0x102001600-v8.log > output.txt
    now this new output.txt file contain metrics from the V8 profiler, like how much time was spent on C++ layer, or in the javascript part, and which function calls took how much time.

8)  node --v8-options
    list all v8 options which are available
    8.1) --harmony
         enable all harmony features.
    8.2) --max_old_space_size
         set the maximum size of the old space on the heap, which directly affects how much memory your process can allocate.so it  will be handy when you run in low memory environment.
    8.3) --optimize_for_size
         instruct v8 to optimize the memory space for size, even if the  application get slower.   